{
  "name": "digdug",
  "version": "1.0.0",
  "description": "Dig Dug. A simple abstraction library for downloading and launching WebDriver service tunnels.",
  "repository": {
    "type": "git",
    "url": "https://github.com/theintern/digdug.git"
  },
  "licenses": [
    {
      "type": "BSD-3-Clause",
      "url": "https://github.com/theintern/digdug/blob/master/LICENSE"
    }
  ],
  "dependencies": {
    "dojo": "2.0.0-alpha1",
    "decompress": "0.2.3"
  },
  "devDependencies": {
    "intern": "1.7.0"
  },
  "scripts": {
    "test": "intern-client config=tests/intern"
  },
  "bugs": {
    "url": "https://github.com/theintern/digdug/issues"
  },
  "keywords": [
    "javascript",
    "test",
    "functional",
    "selenium",
    "webdriver",
    "sauce labs",
    "browserstack",
    "testingbot"
  ],
  "homepage": "http://github.com/theintern/digdug",
  "readme": "# ディグダグ\n\nDig Dug is a simple abstraction library for downloading and launching WebDriver service tunnels and interacting with\nthe REST APIs of these services.\n\nThe following services are currently supported:\n\n* [BrowserStack](http://www.browserstack.com)\n* [Sauce Labs](http://www.saucelabs.com)\n* [TestingBot](http://www.testingbot.com)\n\n\n## Configuration\n\nIn many cases, the only configuration you'll need to do to create a tunnel is provide authentication data. This can be provided by setting properties on tunnels or via environment variables. The tunnels use the following environment variables:\n\nTunnel class         | Environment variables\n---------------------|----------------------------------------------------\n`BrowserStackTunnel` | `BROWSERSTACK_USERNAME`, `BROWSERSTACK_ACCESS_KEY`\n`SauceLabsTunnel`    | `SAUCE_USERNAME`, `SAUCE_ACCESS_KEY`\n`TestingBotTunnel`   | `TESTINGBOT_KEY`, `TESTINGBOT_SECRET`\n\nOther properties, such as the local port the tunnel should serve on or the URL of a proxy server the tunnel should go through, can be passed to a tunnel constructor or set on a tunnel instance. See the pages for [Tunnel](Tunnel.html) and the tunnel subclasses for available properties.\n\n\n## Usage\n\nTo create a new tunnel, import the desired tunnel class, create a new instance, and call its `start` method. `start` returns a Promise that resolves when the tunnel has successfully started. For example, to create a new Sauce Labs tunnel:\n\n```js\nvar SauceLabsTunnel = require('digdug/SauceLabsTunnel');\nvar tunnel = new SauceLabsTunnel();\ntunnel.start().then(function () {\n\t// interact with the WebDriver server at tunnel.clientUrl\n});\n```\n\nOnce a tunnel has been started, a test runner interacts with it as described in the service's documentation. The Sauce Labs and TestingBot executables start a WebDriver server on localhost that the test client communicates with. To interact with BrowserStack, a test client will connect to `hub.browserstack.com` after the tunnel has started.\n\nThe tunnel classes also provide a `sendJobState` convenience method to let the remote service know whether a test session passed or failed. This method accepts a session ID and an object containing service-specific data, and it returns a Promise that resolves if the job state was successfully updated.\n\n```js\ntunnel.sendJobState(sessionId, { success: true });\n```\n\nWhen testing is finished, call the tunnel's `stop` method to cleanly shut it down. This method returns a Promise that is resolved when the service tunnel executable has exited.\n\n```js\ntunnel.stop().then(function () {\n\t// the tunnel has been shut down\n});\n```\n\n## License\n\nDig Dug is available under the terms of the [New BSD License](LICENSE). All code is developed under the terms of the\n[Dojo Foundation CLA](http://dojofoundation.org/about/cla).\n\n© 2013–2014 SitePen, Inc. http://sitepen.com\n",
  "readmeFilename": "README.md",
  "_id": "digdug@1.0.0",
  "dist": {
    "shasum": "f8e8c5a802dca60dfba946ea3f5abd1f16a2eed5"
  },
  "_from": "digdug@1.0.0",
  "_resolved": "https://registry.npmjs.org/digdug/-/digdug-1.0.0.tgz"
}
